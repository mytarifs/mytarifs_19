<%
#raise(StandadError)
table.init do |t|
#  model_keys = t.model.collect {|row| row.keys }.flatten.uniq.collect{|key| key }.compact  
  t.heads = ['', 'Стоимость в месяц, руб', 'Оператор', 'Тариф', 'Общие услуги', 'Тарифные опции']
  
  s_desc = service_description(all_service_ids + identical_services)
  t.set_fields do |f|
#  	raise(StandardError, [f.service_ids, s_desc])
    current_id_set = {}
    services = f.service_ids.map do |id|
        link_to(s_desc[id.to_i]['service_name'], 
        	tarif_class_path(hash_with_region_and_privacy({:id => (s_desc[id.to_i]['slug'] || id.to_i)}) ), {:target => ""})	
    end.join(', ').html_safe if f.service_ids

  	raise(StandardError, [s_desc, "##########", f.run_id, f.attributes, "#############", 
  		f.service_ids, f.tarif_options, all_service_ids]) if false and f.run_id == 991 and f.tarif_id = 800
  		
  	uncovered_service_ids = [f.tarif_id] + f.service_ids + f.tarif_options - all_service_ids
  	if !(uncovered_service_ids).blank?
  		s_desc.merge!(service_description(uncovered_service_ids))
	end
	
    common_services = f.common_services.map do |id|
        link_to(s_desc[id.to_i]['service_name'], 
        	tarif_class_path(hash_with_region_and_privacy({:id => (s_desc[id.to_i]['slug'] || id.to_i)}) ), {:target => ""})	
    end.join(', ').html_safe if f.common_services 

#    raise(StandardError, [s_desc, f.attributes])
    tarif_options = f.tarif_options.map do |id|
        link_to(s_desc[id.to_i]['service_name'], 
        	tarif_class_path(hash_with_region_and_privacy({:id => (s_desc[id.to_i]['slug'] || id.to_i)}) ), {:target => ""})	
    end.join(', ').html_safe if f.tarif_options

    identical_services = f.identical_services.map do |identical_service_group_1|
    	identical_service_group = identical_service_group_1.is_a?(Array) ? identical_service_group_1 : [identical_service_group_1]
    	identical_services_for_one_group = identical_service_group.map do |item|     	
    		changed_item = case 
			when item.is_a?(String)
				item.split('_')
			when item.is_a?(Array)
				item
			else
				[item]
			end
			changed_item.map do |id|
				link_to(s_desc[id.to_i]['service_name'], 
	        	tarif_class_path(hash_with_region_and_privacy({:id => (s_desc[id.to_i]['slug'] || id.to_i)}) ), {:target => ""}) if !id.blank? and s_desc[id.to_i]
    		end.compact.join(' + ') if changed_item	    	      	 
	    end.compact.join(' или ') if identical_service_group
        "[ #{identical_services_for_one_group} ]"
    end.join(', ').html_safe if f.identical_services
  	[
     link_to('', result_service_sets_detailed_results_path(hash_with_region_and_privacy({:result_run_id => f.run.slug, :service_set_id => f.service_set_id}) ), 
     	{:my_remote => true, :class => "fa fa-random fa-lg center", :'aria-hidden' => "true", :'aria-label' => "Просмотр"}),
  	 (f.price.round(0).to_s(:delimited, precision: 0) if f.price),    
     (f.operator.name if f.operator),     
  	 link_to(s_desc[f.tarif_id]['service_name'], 
        	tarif_class_path(hash_with_region_and_privacy({:id => (s_desc[f.tarif_id]['slug'] || f.tarif_id)}) ), {:target => ""}),	
     common_services,   
     tarif_options,
#     f.attributes,
#     (Result::Service.where(:run_id => 4, :service_set_id => f.service_set_id).
#      where("true").pluck(:service_id).uniq - f.service_ids),
#     (f.service_ids - Result::Service.where(:run_id => 4, :service_set_id => f.service_set_id).
#      where("true").pluck(:service_id).uniq),
#     (identical_services || ''),
     (f.call_id_count if current_user_admin?),   
#     f.attributes
#     (f.categ_ids if current_user_admin?),   
#     f['calls_volume'],
#     f['sms_volume'],
#     f['internet_volume'],
#     f['stat_results']
#     f['operator_description'],     
#	 model_keys,    
  	].compact 
  	
  end
end
%>
