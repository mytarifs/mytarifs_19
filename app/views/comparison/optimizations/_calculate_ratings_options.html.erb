<%
form_item.init do |fi|
input_html = {:filtr_name => form_item.filtr_name, :class => "updatable form-control ", 
	:action_name => comparison_set_calculate_ratings_options_path(hash_with_region_and_privacy)}
label_html = {:class => "control-label "}
  s = session_filtr_params(fi)	
  
  rating_regions = RatingsData::RatingPrivacyRegionData['personal'].keys
  
  test_group_keys = (s['rating_keys_to_process'] || []).map{|rating_key_to_process| RatingsData::Rating.try(:[], rating_key_to_process.to_sym).try(:[], :groups).try(:keys) }.flatten.uniq
  
  test_operators = ((s['test_operator'] || []) - ['']).map(&:to_i)
  tarif_ids_to_process = TarifClass.where(:operator_id => test_operators)

  fi.set_fields do |filtr_name|

    [
	  [ 
      	label(filtr_name, "rating_keys_to_process", "rating_keys_to_process", label_html),
      	select(filtr_name, "rating_keys_to_process", RatingsData::Rating.keys, {:include_blank => "выберите rating_keys_to_process", :selected => s["rating_keys_to_process"] }, 
      		input_html.merge({:multiple => true, :size => RatingsData::Rating.keys.size + 1}) ),

      	label(filtr_name, "privacy_keys_to_process", "privacy_keys_to_process", label_html),
      	select(filtr_name, "privacy_keys_to_process", RatingsData::RatingPrivacyRegionData.keys, {:include_blank => "выберите privacy_keys_to_process", :selected => s["privacy_keys_to_process"] }, 
      		input_html.merge({:multiple => true, :size => RatingsData::RatingPrivacyRegionData.keys.size + 1}) ),

      	label(filtr_name, "region_keys_to_process", "region_keys_to_process", label_html),
      	select(filtr_name, "region_keys_to_process", rating_regions, {:include_blank => "выберите region_keys_to_process", :selected => s["region_keys_to_process"] }, 
      		input_html.merge({:multiple => true, :size => rating_regions.size + 1}) ),

      	label(filtr_name, "test_group_key", "test_group_key", label_html),
      	select(filtr_name, "test_group_key", test_group_keys, {:include_blank => "выберите test_group_key", :selected => s["test_group_key"] }, 
      		input_html.merge({:multiple => true, :size => test_group_keys.size + 1}) ),
	  ],
	  [ 
      	label(filtr_name, "test_operator", "test_operator", label_html),
      	collection_select(filtr_name, "test_operator", Category::Operator.operators_with_tarifs, :id, :name, 
	  	{:include_blank => "выберите test_operator", :selected => s["test_operator"] }, input_html.merge({:multiple => true, :size => 5}) ),

      	label(filtr_name, "tarif_id_to_process", "tarif_id_to_process", label_html),
      	collection_select(filtr_name, "tarif_id_to_process", tarif_ids_to_process, :id, :name, 
	  		{:include_blank => "выберите tarif_id_to_process", :selected => s["tarif_id_to_process"] }, 
	  		input_html.merge({:multiple => true, :size => [tarif_ids_to_process.size + 1, 5].min }) ),

      	label(filtr_name, "calculate_optimization_method", "calculate_optimization_method", label_html),
      	select(filtr_name, "calculate_optimization_method", ['load_rating_types', 'load_ratings', 'load_calls', 'calculate_optimizations', 'check_optimizations'], 
	  		{:include_blank => "выберите calculate_optimization_method", :selected => s["calculate_optimization_method"]}, input_html.merge({:size => 6}) ),

      	label(filtr_name, "row_per_page", "Кол-во записей на странице", label_html),
      	select(filtr_name, "row_per_page", [10, 25, 50], 
	  		{:selected => (s["row_per_page"] || 25)}, input_html.merge({:size => 3}) ),
	  ],
	  [
	  	content_tag(:br), 
	  	''
	  ],
	  [
	  	link_to( "Calculate Ratings", comparison_calculate_ratings_path(hash_with_region_and_privacy({'calculate_ratings_options_filtr' => s})), 
			{:class => "btn btn-success", :type => 'button'}),
		''
	  ]
    ] 
  end
end
%>
